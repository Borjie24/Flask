from flask import Flask, jsonify
import random

app = Flask(__name__)

@app.route('/get-coordinates', methods=['GET'])
def get_coordinates():
    # Mock data for coordinates, typically this would be from the DB
    coordinates = [
        {"id": 1, "x": random.randint(10, 80), "y": random.randint(10, 80)},
        {"id": 2, "x": random.randint(10, 80), "y": random.randint(10, 80)},
        {"id": 3, "x": random.randint(10, 80), "y": random.randint(10, 80)}
    ]
    return jsonify(coordinates)

if __name__ == '__main__':
    app.run(debug=True)
---------------------------------------
<template>
  <div id="app">
    <canvas ref="canvas" width="500" height="500" style="border:1px solid black;"></canvas>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  name: "App",
  data() {
    return {
      coordinates: [],
    };
  },
  mounted() {
    // Fetch coordinates from Flask API when the component mounts
    this.fetchCoordinates();
  },
  methods: {
    async fetchCoordinates() {
      try {
        const response = await axios.get('http://127.0.0.1:5000/get-coordinates');
        this.coordinates = response.data;
        this.drawSquares();
      } catch (error) {
        console.error("Error fetching coordinates:", error);
      }
    },
    drawSquares() {
      const canvas = this.$refs.canvas;
      const ctx = canvas.getContext('2d');
      
      // Clear previous drawings
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Iterate through coordinates and draw squares
      this.coordinates.forEach(coord => {
        // Set color based on ID (green for odd, red for even)
        const color = coord.id % 2 === 0 ? 'red' : 'green';
        
        // Draw the square on the canvas
        ctx.fillStyle = color;
        ctx.fillRect(coord.x * 5, coord.y * 5, 20, 20); // Scale x and y for better display
      });
    }
  }
};
</script>

<style scoped>
canvas {
  background-color: #000000;
}
</style>
--------------------------------------
import pytest
from app import app  # Assuming your Flask app is named app.py

# Test case to check if the coordinates endpoint is working
@pytest.fixture
def client():
    with app.test_client() as client:
        yield client

def test_get_coordinates(client):
    response = client.get('/get-coordinates')
    
    # Check if the response status code is 200
    assert response.status_code == 200
    
    # Check if the response is a JSON object
    data = response.get_json()
    
    # Check if the data contains the expected keys (id, x, y)
    for coordinate in data:
        assert 'id' in coordinate
        assert 'x' in coordinate
        assert 'y' in coordinate
    
    # Check if the coordinates are in the expected range (example validation)
    for coordinate in data:
        assert 0 <= coordinate['x'] <= 100
        assert 0 <= coordinate['y'] <= 100
----------------------------------
import { mount } from '@vue/test-utils';
import axios from 'axios';
import App from '@/App.vue';
import MockAdapter from 'axios-mock-adapter';

// Create a new instance of the mock adapter
const mock = new MockAdapter(axios);

describe('App.vue', () => {
  beforeEach(() => {
    // Mock the GET request to return specific data
    mock.onGet('http://127.0.0.1:5000/get-coordinates').reply(200, [
      { id: 1, x: 10, y: 20 },
      { id: 2, x: 30, y: 40 },
      { id: 3, x: 50, y: 60 }
    ]);
  });

  it('fetches coordinates and draws squares', async () => {
    // Mount the Vue component
    const wrapper = mount(App);

    // Wait for the coordinates to be fetched
    await wrapper.vm.$nextTick();

    // Check if the coordinates are set in the component's data
    expect(wrapper.vm.coordinates).toEqual([
      { id: 1, x: 10, y: 20 },
      { id: 2, x: 30, y: 40 },
      { id: 3, x: 50, y: 60 }
    ]);

    // Now, check if the squares are being drawn on the canvas
    const canvas = wrapper.find('canvas');
    const ctx = canvas.element.getContext('2d');

    // Check if the canvas context is set correctly
    expect(ctx).toBeDefined();

    // Expect that the fillRect method is called for each coordinate
    expect(ctx.fillRect).toHaveBeenCalledTimes(3);
    expect(ctx.fillRect).toHaveBeenCalledWith(50, 100, 20, 20);  // For (x=10, y=20)
    expect(ctx.fillRect).toHaveBeenCalledWith(150, 200, 20, 20); // For (x=30, y=40)
    expect(ctx.fillRect).toHaveBeenCalledWith(250, 300, 20, 20); // For (x=50, y=60)
  });
});
